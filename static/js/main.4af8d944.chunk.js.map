{"version":3,"sources":["config/index.js","substrate-lib/SubstrateContext.js","substrate-lib/components/DeveloperConsole.js","BlockNumber.js","Metadata.js","NodeInfo.js","App.js","index.js"],"names":["configEnv","require","envVars","reduce","mem","n","undefined","process","slice","config","configCommon","connectedSocket","queryString","parse","window","location","search","rpc","PROVIDER_SOCKET","console","log","INIT_STATE","socket","jsonrpc","RPC","types","CUSTOM_TYPES","keyring","keyringState","api","apiError","apiState","reducer","state","action","type","payload","Error","SubstrateContext","React","createContext","SubstrateContextProvider","props","initState","forEach","key","useReducer","dispatch","provider","WsProvider","_api","ApiPromise","on","isReady","then","err","connect","Provider","value","children","useSubstrate","useContext","DeveloperConsole","util","utilCrypto","Main","finalized","useState","blockNumber","setBlockNumber","blockNumberTimer","setBlockNumberTimer","blockHash","setBlockHash","block","setBlock","bestNumber","derive","chain","bestNumberFinalized","useEffect","unsubscribeAll","number","toNumber","unsub","catch","error","getBlockHash","toHuman","getBlock","timer","time","id","setInterval","clearInterval","Grid","Row","stretched","Column","width","Card","Content","textAlign","Statistic","label","extra","Icon","name","fluid","Table","celled","Body","Cell","header","parentHash","BlockNumber","data","version","metadata","setMetadata","a","getMetadata","Header","Meta","Modal","trigger","Button","scrolling","Description","JSON","stringify","Metadata","nodeInfo","setNodeInfo","Promise","all","system","nodeName","nodeVersion","getInfo","href","NodeInfo","text","centered","columns","padded","Message","negative","compact","floating","content","Dimmer","active","Loader","size","contextRef","createRef","ref","Container","stackable","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4af8d944.chunk.js","sourcesContent":["import configCommon from './common.json';\n// Using `require` as `import` does not support dynamic loading (yet).\nconst configEnv = require(`./${process.env.NODE_ENV}.json`);\n\n// Accepting React env vars and aggregating them into `config` object.\nconst envVarNames = [\n  'REACT_APP_PROVIDER_SOCKET',\n  'REACT_APP_DEVELOPMENT_KEYRING'\n];\nconst envVars = envVarNames.reduce((mem, n) => {\n  // Remove the `REACT_APP_` prefix\n  if (process.env[n] !== undefined) mem[n.slice(10)] = process.env[n];\n  return mem;\n}, {});\n\nconst config = { ...configCommon, ...configEnv, ...envVars };\nexport default config;\n","import React, { useReducer, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport jsonrpc from '@polkadot/types/interfaces/jsonrpc';\nimport queryString from 'query-string';\n\nimport { ApiPromise, WsProvider } from '@polkadot/api';\n// import { web3Accounts, web3Enable } from '@polkadot/extension-dapp';\n// import keyring from '@polkadot/ui-keyring';\n\nimport config from '../config';\n\nconst parsedQuery = queryString.parse(window.location.search);\nconst connectedSocket = parsedQuery.rpc || config.PROVIDER_SOCKET;\nconsole.log(`Connected socket: ${connectedSocket}`);\n\n///\n// Initial state for `useReducer`\n\nconst INIT_STATE = {\n  socket: connectedSocket,\n  jsonrpc: { ...jsonrpc, ...config.RPC },\n  types: config.CUSTOM_TYPES,\n  keyring: null,\n  keyringState: null,\n  api: null,\n  apiError: null,\n  apiState: null\n};\n\n///\n// Reducer function for `useReducer`\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'CONNECT_INIT':\n      return { ...state, apiState: 'CONNECT_INIT' };\n\n    case 'CONNECT':\n      return { ...state, api: action.payload, apiState: 'CONNECTING' };\n\n    case 'CONNECT_SUCCESS':\n      return { ...state, apiState: 'READY' };\n\n    case 'CONNECT_ERROR':\n      return { ...state, apiState: 'ERROR', apiError: action.payload };\n\n    case 'LOAD_KEYRING':\n      return { ...state, keyringState: 'LOADING' };\n\n    case 'SET_KEYRING':\n      return { ...state, keyring: action.payload, keyringState: 'READY' };\n\n    case 'KEYRING_ERROR':\n      return { ...state, keyring: null, keyringState: 'ERROR' };\n\n    default:\n      throw new Error(`Unknown type: ${action.type}`);\n  }\n};\n\n///\n// Connecting to the Substrate node\n\nconst connect = (state, dispatch) => {\n  const { apiState, socket, jsonrpc, types } = state;\n  // We only want this function to be performed once\n  if (apiState) return;\n\n  dispatch({ type: 'CONNECT_INIT' });\n\n  const provider = new WsProvider(socket);\n  const _api = new ApiPromise({ provider, types, rpc: jsonrpc });\n\n  // Set listeners for disconnection and reconnection event.\n  _api.on('connected', () => {\n    dispatch({ type: 'CONNECT', payload: _api });\n    // `ready` event is not emitted upon reconnection and is checked explicitly here.\n    _api.isReady.then((_api) => dispatch({ type: 'CONNECT_SUCCESS' }));\n  });\n  _api.on('ready', () => dispatch({ type: 'CONNECT_SUCCESS' }));\n  _api.on('error', err => dispatch({ type: 'CONNECT_ERROR', payload: err }));\n};\n\n///\n// Loading accounts from dev and polkadot-js extension\n\n// let loadAccts = false;\n// const loadAccounts = (state, dispatch) => {\n//   const asyncLoadAccounts = async () => {\n//     dispatch({ type: 'LOAD_KEYRING' });\n//     try {\n//       await web3Enable(config.APP_NAME);\n//       let allAccounts = await web3Accounts();\n//       allAccounts = allAccounts.map(({ address, meta }) =>\n//         ({ address, meta: { ...meta, name: `${meta.name} (${meta.source})` } }));\n//       keyring.loadAll({ isDevelopment: config.DEVELOPMENT_KEYRING }, allAccounts);\n//       dispatch({ type: 'SET_KEYRING', payload: keyring });\n//     } catch (e) {\n//       console.error(e);\n//       dispatch({ type: 'KEYRING_ERROR' });\n//     }\n//   };\n\n  // const { keyringState } = state;\n  // // If `keyringState` is not null `asyncLoadAccounts` is running.\n  // if (keyringState) return;\n  // // If `loadAccts` is true, the `asyncLoadAccounts` has been run once.\n  // if (loadAccts) return dispatch({ type: 'SET_KEYRING', payload: keyring });\n\n  // This is the heavy duty work\n  // loadAccts = true;\n  // asyncLoadAccounts();\n// };\n\nconst SubstrateContext = React.createContext();\n\nconst SubstrateContextProvider = (props) => {\n  // filtering props and merge with default param value\n  const initState = { ...INIT_STATE };\n  const neededPropNames = ['socket', 'types'];\n  neededPropNames.forEach(key => {\n    initState[key] = (typeof props[key] === 'undefined' ? initState[key] : props[key]);\n  });\n\n  const [state, dispatch] = useReducer(reducer, initState);\n  connect(state, dispatch);\n  // loadAccounts(state, dispatch);\n\n  return <SubstrateContext.Provider value={state}>\n    {props.children}\n  </SubstrateContext.Provider>;\n};\n\n// prop typechecking\nSubstrateContextProvider.propTypes = {\n  socket: PropTypes.string,\n  types: PropTypes.object\n};\n\nconst useSubstrate = () => ({ ...useContext(SubstrateContext) });\n\nexport { SubstrateContextProvider, useSubstrate };\n","// This component will simply add utility functions to your developer console.\nimport { useSubstrate } from '../';\n\nexport default function DeveloperConsole (props) {\n  const { api, apiState, keyring, keyringState } = useSubstrate();\n  if (apiState === 'READY') { window.api = api; }\n  if (keyringState === 'READY') { window.keyring = keyring; }\n  window.util = require('@polkadot/util');\n  window.utilCrypto = require('@polkadot/util-crypto');\n\n  return null;\n}\n","import React, { useEffect, useState } from 'react';\nimport { Statistic, Grid, Card, Icon, Table } from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\n\nfunction Main (props) {\n  const { api } = useSubstrate();\n  const { finalized } = props;\n  const [blockNumber, setBlockNumber] = useState(0);\n  const [blockNumberTimer, setBlockNumberTimer] = useState(0);\n  const [blockHash, setBlockHash] = useState(0);\n  const [block, setBlock] = useState({});\n\n  const bestNumber = finalized\n    ? api.derive.chain.bestNumberFinalized\n    : api.derive.chain.bestNumber;\n\n\n  useEffect(() => {\n    let unsubscribeAll = null;\n\n    bestNumber(number => {\n        // console.log('number', number)\n        setBlockNumber(number.toNumber());\n        setBlockNumberTimer(0);\n        setBlock({});\n      })\n      .then(unsub => {\n        unsubscribeAll = unsub;\n      })\n      .catch(console.error);\n\n    return () => unsubscribeAll && unsubscribeAll();\n  }, [bestNumber]);\n\n  useEffect(() => {\n    // console.log('block number', blockNumber);\n    api.rpc.chain.getBlockHash(blockNumber)\n      .then(blockHash => {\n        setBlockHash(blockHash.toHuman());\n        return api.rpc.chain.getBlock(blockHash);\n      })\n      .then(block => {\n        setBlock(block);\n        // console.log('block', block.toHuman());\n        // console.log('block', block.block.header.toHuman());\n        // console.log('block hash', block.hash.toHuman());\n        // the information for each of the contained extrinsics\n\n        // block.block.extrinsics.forEach((ex, index) => {\n        //   // the extrinsics are decoded by the API, human-like view\n        //   console.log(index, ex.toHuman());\n\n        //   const { isSigned, meta, method: { args, method, section } } = ex;\n\n        //   // explicit display of name, args & documentation\n        //   console.log(`${section}.${method}(${args.map((a) => a.toString()).join(', ')})`);\n        //   console.log(meta.documentation.map((d) => d.toString()).join('\\n'));\n\n        //   // signer/nonce info\n        //   if (isSigned) {\n        //     console.log(`signer=${ex.signer.toString()}, nonce=${ex.nonce.toString()}`);\n        //   }\n        // });\n      });\n  }, [blockNumber]);\n\n  const timer = () => {\n    setBlockNumberTimer(time => time + 1);\n  };\n\n  useEffect(() => {\n    const id = setInterval(timer, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return (\n    <Grid.Row stretched>\n      <Grid.Column width={4}>\n        <Card>\n          <Card.Content textAlign='center'>\n            <Statistic\n              label={(finalized ? 'Finalized' : 'Current') + ' Block'}\n              value={blockNumber}\n            />\n          </Card.Content>\n          <Card.Content extra>\n            <Icon name='time' /> {blockNumberTimer}\n          </Card.Content>\n        </Card>\n      </Grid.Column>\n      <Grid.Column width={10}>\n        <Card fluid>\n          {/* <Card.Description> */}\n          <Table celled>\n            <Table.Body>\n              <Table.Row>\n                <Table.Cell>\n                  Block Hash\n                </Table.Cell>\n                <Table.Cell>\n                  {blockHash}\n                </Table.Cell>\n              </Table.Row>\n              <Table.Row>\n                <Table.Cell>\n                  Parent Hash\n                </Table.Cell>\n                <Table.Cell>\n                  {block.block && block.block.header.parentHash.toHuman()}\n                </Table.Cell>\n              </Table.Row>\n            </Table.Body>\n          </Table>\n          {/* </Card.Description> */}\n        </Card>\n      </Grid.Column>\n    </Grid.Row>\n  );\n}\n\nexport default function BlockNumber (props) {\n  const { api } = useSubstrate();\n  return api.derive &&\n    api.derive.chain &&\n    api.derive.chain.bestNumber &&\n    api.derive.chain.bestNumberFinalized ? (\n      <Main {...props} />\n    ) : null;\n}\n","import React, { useEffect, useState } from 'react';\nimport { Grid, Modal, Button, Card } from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\n\nfunction Main (props) {\n  const { api } = useSubstrate();\n  const [metadata, setMetadata] = useState({ data: null, version: null });\n\n  useEffect(() => {\n    const getMetadata = async () => {\n      try {\n        const data = await api.rpc.state.getMetadata();\n        setMetadata({ data, version: data.version });\n      } catch (e) {\n        console.error(e);\n      }\n    };\n    getMetadata();\n  }, [api.rpc.state]);\n\n  return (\n    <Grid.Column>\n      <Card>\n        <Card.Content>\n          <Card.Header>Metadata</Card.Header>\n          <Card.Meta>\n            <span>v{metadata.version}</span>\n          </Card.Meta>\n        </Card.Content>\n        <Card.Content extra>\n          <Modal trigger={<Button>Show Metadata</Button>}>\n            <Modal.Header>Runtime Metadata</Modal.Header>\n            <Modal.Content scrolling>\n              <Modal.Description>\n                <pre>\n                  <code>{JSON.stringify(metadata.data, null, 2)}</code>\n                </pre>\n              </Modal.Description>\n            </Modal.Content>\n          </Modal>\n        </Card.Content>\n      </Card>\n    </Grid.Column>\n  );\n}\n\nexport default function Metadata (props) {\n  const { api } = useSubstrate();\n  return api.rpc && api.rpc.state && api.rpc.state.getMetadata ? (\n    <Main {...props} />\n  ) : null;\n}\n","import React, { useEffect, useState } from 'react';\nimport { Card, Icon, Grid } from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\n\nfunction Main (props) {\n  const { api } = useSubstrate();\n  const [nodeInfo, setNodeInfo] = useState({});\n\n  useEffect(() => {\n    const getInfo = async () => {\n      try {\n        const [chain, nodeName, nodeVersion] = await Promise.all([\n          api.rpc.system.chain(),\n          api.rpc.system.name(),\n          api.rpc.system.version()\n        ]);\n        setNodeInfo({ chain, nodeName, nodeVersion });\n      } catch (e) {\n        console.error(e);\n      }\n    };\n    getInfo();\n  }, [api.rpc.system]);\n\n  return (\n    <Grid.Column>\n      <Card>\n        <Card.Content>\n          <Card.Header>{nodeInfo.nodeName}</Card.Header>\n          <Card.Meta>\n            <span>{nodeInfo.chain}</span>\n          </Card.Meta>\n          <Card.Description>\n            This app is modified from {' '}\n            <a href='https://github.com/substrate-developer-hub/substrate-front-end-template'>\n              Substrate Front End Template\n            </a>\n          </Card.Description>\n        </Card.Content>\n        <Card.Content extra>\n          <Icon name='setting' />v{nodeInfo.nodeVersion}\n        </Card.Content>\n      </Card>\n    </Grid.Column>\n  );\n}\n\nexport default function NodeInfo (props) {\n  const { api } = useSubstrate();\n  return api.rpc &&\n    api.rpc.system &&\n    api.rpc.system.chain &&\n    api.rpc.system.name &&\n    api.rpc.system.version ? (\n      <Main {...props} />\n    ) : null;\n}\n","import React, { useState, createRef } from 'react';\nimport { Container, Dimmer, Loader, Grid, Sticky, Message } from 'semantic-ui-react';\nimport 'semantic-ui-css/semantic.min.css';\n\nimport { SubstrateContextProvider, useSubstrate } from './substrate-lib';\nimport { DeveloperConsole } from './substrate-lib/components';\n\n// import AccountSelector from './AccountSelector';\n// import Balances from './Balances';\nimport BlockNumber from './BlockNumber';\n// import Events from './Events';\n// import Interactor from './Interactor';\nimport Metadata from './Metadata';\nimport NodeInfo from './NodeInfo';\n// import TemplateModule from './TemplateModule';\n// import Transfer from './Transfer';\n// import Upgrade from './Upgrade';\n\nfunction Main () {\n  // const [accountAddress, setAccountAddress] = useState(null);\n  // const { apiState, keyring, keyringState, apiError } = useSubstrate();\n  const { apiState, apiError } = useSubstrate();\n  // const accountPair =\n  //   accountAddress &&\n  //   keyringState === 'READY' &&\n  //   keyring.getPair(accountAddress);\n\n  const loader = text =>\n    <Dimmer active>\n      <Loader size='small'>{text}</Loader>\n    </Dimmer>;\n\n  const message = err =>\n    <Grid centered columns={2} padded>\n      <Grid.Column>\n        <Message negative compact floating\n          header='Error Connecting to Substrate'\n          content={`${JSON.stringify(err,null,4)}`}\n        />\n      </Grid.Column>\n    </Grid>;\n\n  if (apiState === 'ERROR') return message(apiError);\n  else if (apiState !== 'READY') return loader('Connecting to Substrate');\n\n  // if (keyringState !== 'READY') {\n  //   return loader('Loading accounts (please review any extension\\'s authorization)');\n  // }\n\n  const contextRef = createRef();\n\n  return (\n    <div ref={contextRef}>\n      {/* <Sticky context={contextRef}>\n        <AccountSelector setAccountAddress={setAccountAddress} />\n      </Sticky> */}\n      <Container>\n        <Grid stackable columns='equal'>\n          <Grid.Row stretched>\n            <NodeInfo />\n            <Metadata />\n          </Grid.Row>\n            <BlockNumber />\n          {/* <Grid.Row stretched> */}\n            <BlockNumber finalized />\n          {/* </Grid.Row> */}\n          {/* <Grid.Row stretched>\n            <Balances />\n          </Grid.Row> */}\n          {/* <Grid.Row>\n            <Transfer accountPair={accountPair} />\n            <Upgrade accountPair={accountPair} />\n          </Grid.Row> */}\n          {/* <Grid.Row>\n            <Interactor accountPair={accountPair} />\n            <Events />\n          </Grid.Row>\n          <Grid.Row>\n            <TemplateModule accountPair={accountPair} />\n          </Grid.Row> */}\n        </Grid>\n      </Container>\n      <DeveloperConsole />\n    </div>\n  );\n}\n\nexport default function App () {\n  return (\n    <SubstrateContextProvider>\n      <Main />\n    </SubstrateContextProvider>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}